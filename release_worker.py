import os
import subprocess
import shutil
from PyQt6.QtCore import QThread, pyqtSignal


class ReleaseWorker(QThread):
    log_signal = pyqtSignal(str)
    finished_signal = pyqtSignal()
    error_signal = pyqtSignal(str)

    def __init__(self, project_path, repo_name, release_data, screenshot_path=None):
        super().__init__()
        self.project_path = project_path
        self.repo_name = repo_name
        self.release_data = release_data
        self.screenshot_path = screenshot_path

    def _run_command(self, command, cwd=None):
        if cwd is None:
            cwd = self.project_path
        self.log_signal.emit(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command} –≤ {cwd}")
        process = subprocess.run(command, cwd=cwd, shell=True, capture_output=True, text=True, encoding='utf-8')
        if process.stdout:
            self.log_signal.emit(f"Stdout: {process.stdout.strip()}")
        if process.stderr:
            self.log_signal.emit(f"Stderr: {process.stderr.strip()}")
        if process.returncode != 0:
            raise Exception(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ {process.returncode}): {command}")
        return process.stdout

    def run(self):
        try:
            self.log_signal.emit(f"–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞ '{self.release_data['tag']}' –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è '{self.repo_name}'.")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
            screenshot_to_upload = None
            if self.screenshot_path and os.path.exists(self.screenshot_path):
                screenshots_dir = os.path.join(self.project_path, "screenshots")
                if not os.path.exists(screenshots_dir):
                    os.makedirs(screenshots_dir)

                screenshot_filename = os.path.basename(self.screenshot_path)
                destination_path = os.path.join(screenshots_dir, screenshot_filename)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Ç–µ–º –∂–µ, —á—Ç–æ –∏ –∫–æ–Ω–µ—á–Ω—ã–π
                if not os.path.exists(destination_path) or not os.path.samefile(self.screenshot_path, destination_path):
                    shutil.copy2(self.screenshot_path, destination_path)
                
                screenshot_to_upload = destination_path
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ README.md
                self._add_screenshot_to_readme(destination_path)
                
                # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ README.md
                self._commit_and_push_changes()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞
            command = f"gh release create {self.release_data['tag']}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if self.release_data['title']:
                command += f" --title \"{self.release_data['title']}\""
                
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
            if self.release_data['notes']:
                notes_filename = "temp_release_notes.md"
                notes_file_path = os.path.join(self.project_path, notes_filename)
                with open(notes_file_path, "w", encoding="utf-8") as f:
                    f.write(self.release_data['notes'])
                command += f' --notes-file "{notes_filename}"'
                
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
            if screenshot_to_upload and os.path.exists(screenshot_to_upload):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (GitHub –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ 2 –ì–ë)
                file_size = os.path.getsize(screenshot_to_upload)
                if file_size <= 2 * 1024 * 1024 * 1024:  # 2 –ì–ë
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∫–æ–º–∞–Ω–¥—ã gh
                    relative_screenshot_path = os.path.relpath(screenshot_to_upload, self.project_path)
                    command += f' "{relative_screenshot_path}"'
                else:
                    self.log_signal.emit("–§–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫ —Ä–µ–ª–∏–∑—É")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            self._run_command(command)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—á–∞–Ω–∏—è–º–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            notes_file_path = os.path.join(self.project_path, "temp_release_notes.md")
            if os.path.exists(notes_file_path):
                os.remove(notes_file_path)
                
            self.log_signal.emit(f"–†–µ–ª–∏–∑ '{self.release_data['tag']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è '{self.repo_name}'.")
            
            self.finished_signal.emit()
        except Exception as e:
            self.error_signal.emit(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º –ø–æ—Ç–æ–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞: {e}")
            self.finished_signal.emit()

    def _commit_and_push_changes(self):
        """–ö–æ–º–º–∏—Ç–∏—Ç –∏ –ø—É—à–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π README.md –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
            self._run_command("git add README.md screenshots")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
            self._run_command('git commit -m "–î–æ–±–∞–≤–ª–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ README.md"')
            
            # –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self._run_command("git push origin master")
            
            self.log_signal.emit("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ README.md –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ –∏ –ø—É—à—É –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")

    def _add_screenshot_to_readme(self, screenshot_path):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ README.md"""
        readme_path = os.path.join(self.project_path, "README.md")
        
        if not os.path.exists(readme_path):
            self.log_signal.emit("README.md –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.")
            return
            
        try:
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ README.md
            with open(readme_path, "r", encoding="utf-8") as f:
                content = f.read()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–∞–∑–¥–µ–ª —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
            if "## üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã" in content or "![–°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã]" in content:
                self.log_signal.emit("–†–∞–∑–¥–µ–ª —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ README.md.")
                # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                content = content.split("## üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã")[0]

            # –°–æ–∑–¥–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
            screenshot_filename = os.path.basename(screenshot_path)
            relative_screenshot_path = f"screenshots/{screenshot_filename}"
            
            # –°–æ–∑–¥–∞–µ–º markdown –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            screenshot_markdown = f"\n## üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã\n\n![–°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã]({relative_screenshot_path})\n"
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
            if "## –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞" in content:
                content = content.replace("## –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", f"## –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞\n{screenshot_markdown}")
            else:
                # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
                content = screenshot_markdown + content

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(readme_path, "w", encoding="utf-8") as f:
                f.write(content)
                
            self.log_signal.emit("–°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ README.md")
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ README.md: {e}")